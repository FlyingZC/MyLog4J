 ### 设置根Logger ###
 #log4j.rootLogger=[level],appendName1,appendName2,...
 #level为debug,appendName1为1,appendName2为D,...
 #根记录器的默认级别是Level.DEBUG
 #指定三个rootLogger,stdout,D,E
log4j.rootLogger = debug,stdout,D,E

##############################################################
### 输出信息到控制台 ###
#Log4j提供的appender包括:ConsoleAppender(控制台),FileAppender(文件),DailyRollingFileAppender(每天产生一个日志文件)
#RollingFileAppender(文件大小到达指定尺寸的时候产生一个新文件),WriterAppender(将日志信息以流格式发送到任意指定地方)
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
#layout包括:HTMLLayout(以HTML表格形式布局),PatternLayout(灵活指定布局模式),SimpleLayout(包含日志信息的级别和信息字符串),TTCCLayout(包含日志产生的时间,线程,类别等信息)
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#格式化日志信息
#-x x信息输出时左对齐

#%p 输出优先级,即DEBUG,INFO,WARN,ERROR,FATAL
#%d 输出日志时间点的日期,如%d{yyyy-MM-dd HH:mm:ss,SSS},输出类似:2002-10-18 22:10:28,921
#%l 输出日志事件的发生位置,包括类目名,发生的线程,以及在代码中的行数,输出类似:TestLog.main(TestLog.java:10)  
#%n 输出一个回车换行符,windows中"\r\n",unix中"\n"
#%m 输出  代码中指定的消息
#%r 输出自应用启动 至 输出该log信息 所耗费的毫秒数
#%c 输出类的全名
#%t 输出产生该日志事件的线程名
#以下配置输出类似于
#[WARN ] 2017-07-09 21:43:28,765 method:com.zc.zlog.TestLog2.<init>(TestLog2.java:12)
#yes ~~~
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n
##############################################################

### 输出到日志文件 ###
#一.输出DEBUG 级别以上的日志到E://logs/log.log中
#名为D的Logger对象的appender为DailyRollingFileAppender类型(每天产生一个日志文件)
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
#名为D的Logger对象的输出文件,也可使用相对路径
log4j.appender.D.File = E://logs/log.log
log4j.appender.D.Append = true
#输出DEBUG级别及以上的日志,Threshold指定日志消息的输出最低层次
log4j.appender.D.Threshold = DEBUG
#名为D的Logger对象的layout 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

###二.输出ERROR 级别以上的日志到=E://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =E://logs/error.log 
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n